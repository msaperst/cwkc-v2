# Workflow for updating our results file
# This job can be triggered manually, and will run, alternatively, it can be triggered by
# changes to our Google Sheets, however it will only run if the time are between the
# start/stop times of the cup (defined below)
name: Update results from multiple locations

on:
  # Triggers from our google sheets
  repository_dispatch:
    types: [ sheet-change ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent data check, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these updates to complete.
concurrency:
  group: "updates"
  cancel-in-progress: false

# Sets permissions of the GITHUB_TOKEN to allow updating our results file and publishing updates to pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:

  # this job is relatively simple, and just checks the current date with the provided
  # dates, and outputs true if inside the cup range
  check-date:
    runs-on: ubuntu-latest
    steps:
      - name: Check Date Range
        id: check_date
        # these dates need to coincide with our start and stop dates
        run: |
          current_date=$(date +%Y-%m-%d)
          start_date="2025-01-01"
          end_date="2025-01-31"
          if [[ $current_date > $start_date && $current_date < $end_date ]]; then
            echo "in_range=true" >> $GITHUB_OUTPUT
          else
            echo "in_range=false" >> $GITHUB_OUTPUT
          fi

  # this job updates the csv file based on the data from the Google Sheets files (through a
  # Python script). This job only run if within the date range of the cup, or if it was
  # triggered manually
  update-data:
    runs-on: ubuntu-latest
    needs: check-date
    if: ${{ needs.check-date.outputs.in_range == 'true' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # credentials for Google Sheets obtained from here
      # https://docs.gspread.org/en/latest/oauth2.html#for-bots-using-service-account
      - name: Setup credentials
        run: |
          cd scraper
          echo "{" > spreadsheet_credentials.json
          echo "  \"type\": \"${{ secrets.TYPE }}\"," >> spreadsheet_credentials.json
          echo "  \"project_id\": \"${{ secrets.PROJECT_ID }}\"," >> spreadsheet_credentials.json
          echo "  \"private_key_id\": \"${{ secrets.PRIVATE_KEY_ID }}\"," >> spreadsheet_credentials.json
          echo "  \"private_key\": \"${{ secrets.PRIVATE_KEY }}\"," >> spreadsheet_credentials.json
          echo "  \"client_email\": \"${{ secrets.CLIENT_EMAIL }}\"," >> spreadsheet_credentials.json
          echo "  \"client_id\": \"${{ secrets.CLIENT_ID }}\"," >> spreadsheet_credentials.json
          echo "  \"auth_uri\": \"${{ secrets.AUTH_URI }}\"," >> spreadsheet_credentials.json
          echo "  \"token_uri\": \"${{ secrets.TOKEN_URI }}\"," >> spreadsheet_credentials.json
          echo "  \"auth_provider_x509_cert_url\": \"${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}\"," >> spreadsheet_credentials.json
          echo "  \"client_x509_cert_url\": \"${{ secrets.CLIENT_X509_CERT_URL }}\"," >> spreadsheet_credentials.json
          echo "  \"universe_domain\": \"${{ secrets.UNIVERSE_DOMAIN }}\"" >> spreadsheet_credentials.json
          echo "}" >> spreadsheet_credentials.json

      #install the python needed
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f scraper/requirements.txt ]; then pip install -r scraper/requirements.txt; fi

      - name: Update results
        run: |
          cd scraper
          python getData.py

      # check to see if we actually have any changes to our file
      - name: Check changes
        id: check-changes
        run: |  # for some reason, this always comes back as true
          if git diff public/assets/csv/results.csv &> /dev/null; then
            echo "difference=true" >> $GITHUB_OUTPUT
          else
            echo "difference=false" >> $GITHUB_OUTPUT
          fi

      # push our updates to GitHub to save them
      - name: Publish new results
        if: ${{ steps.check-changes.outputs.difference == 'true' }}
        uses: test-room-7/action-update-file@v2
        with:
          file-path: public/assets/csv/results.csv
          commit-msg: Updating results
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # this final job publishes our code back to GitHub pages. This only runs if there were
  # changes detected in the above steps
  deploy-site:
    runs-on: ubuntu-latest
    needs: update-data
    if: ${{ needs.update-data.check-changes.outputs.difference == 'true' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'  # Upload public folder

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
